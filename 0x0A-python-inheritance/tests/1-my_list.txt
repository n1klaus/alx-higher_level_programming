# 1-my_list.txt

===============================
 How to Use 1-my_list.py
===============================

This class library is very simple, since it only has 
one public instance method called ``print_sorted() 
in the class MyList(list)``.

Numbers
=======
``MyList.print_sorted()`` prints a sorted number list

::
	>>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.extend([1, 4, 2, 3, 5])
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Providing an object with no available lists will output an empty list

::
    >>> my_list2 = MyList()
    >>> my_list2.print_sorted()
    []

Providing arguments to the method while none is required as only the object
is passed to the method inorder to access the list data, hence a TypeError
Exception is raised

::
    >>> my_list3 = MyList()
    >>> my_list3.print_sorted(1, "string")
    Traceback (most recent call last):
    TypeError: MyList.print_sorted() takes 1 positional argument but 3 were given

Providing a negative integer number or a number less than zero will
sort the numbers appropriately.

::
    >>> my_list3 = MyList()
    >>> my_list3.extend([-1, -4, -2, -3, -5])
    >>> my_list3.print_sorted()
    [-5, -4, -3, -2, -1]

Also works with all floating point integer numbers.

::
    >>> my_list4 = MyList()
    >>> my_list4.extend([1.9999, 4.9999, 2.9999, 3.9999, 5.9999])
    >>> my_list4.print_sorted()
    [1.9999, 2.9999, 3.9999, 4.9999, 5.9999]
    >>> my_list5 = MyList()
    >>> my_list5.extend([-1.9999, -4.9999, -2.9999, -3.9999, -5.9999])
    >>> my_list5.print_sorted()
    [-5.9999, -4.9999, -3.9999, -2.9999, -1.9999]

Non-Numbers
===========
Works with other types such as string, list, dictionary, or a tuple therefore printing the appropriate sorted values of the list data.

::
    >>> string_list = MyList()
    >>> string_list.extend(['pepper', 'bell', 'apple', 'nutmeg'])
    >>> string_list.print_sorted()
    ['apple', 'bell', 'nutmeg', 'pepper']
    >>> tuple_list = MyList()
    >>> tuple_list.extend((30, 5, 34, 3))
    >>> tuple_list.print_sorted()
    [3, 5, 30, 34]

Providing a dictionary prints the sorted keys of the dictionary.

::
    >>> dict_list = MyList()
    >>> dict_list.extend({'height':30, 'age':5, 'weight':34, 'bmi':13})
    >>> dict_list.print_sorted()
    ['age', 'bmi', 'height', 'weight']

Providing a list with None type values raises a TypeError exception as
comparison operators are not possible on the values

::
    >>> None_list = MyList()
    >>> None_list.append(None)
    >>> None_list.print_sorted()
    [None]
    >>> None_list = MyList()
    >>> noneList = [None, None, None]
    >>> None_list.append(noneList)
    >>> None_list.print_sorted()
    [[None, None, None]]
    >>> None_list.extend(noneList)
    >>> None_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'NoneType' and 'list'