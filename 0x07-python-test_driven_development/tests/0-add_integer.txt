# 0-add_integer.txt

===============================
 How to Use 0-add_integer.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======
``add_integer()`` returns the sum of its arguments.
For numbers, that value is equivalent to using the ``+`` operator.

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3
	>>> add_integer(100, -2)
	98

Since it only has one positional argument required
which is the first parameter, the second parameter value defaults
to 98 if only one arguments is given.

::
	>>> add_integer(2)
	100
	>>> add_integer(0)
	98

It also works with floating-point values and negative values
since argument values are casted into integers during the operation

::
	>>> add_integer(100.3, -2)
	98
	>>> add_integer(-100, -2)
	-102
	>>> add_integer(1.9999999, 99.999)
	100

Non-Numbers
===========
Because the ``+`` operator is also defined on data types other 
than numbers and we are only working with integer numbers and 
floating point numbers, a TypeError Exception is raised for 
types string, list, dictionary, or a tuple therefore printing 
the custom TypeError Exception message.

::
	>>> add_integer(4, "School")
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add_integer("School", 4)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

No Arguments
===========
Providing no arguments for the first argument @a prints
a TypeError message as an integer for the first positional argument
is required for printing the result of the addition

::
	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'