# 2-matrix_divided.txt

===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Numbers
=======
``matrix_divided()`` returns a new matrix with the values of the division of its elements with the div argument.
The operator in use is the ``/`` operator.

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3) 
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix_divided(matrix, 1)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Testing with only one positional argument will give a TypeError as both psoitional arguments of type list and int/float respectively are required

::
	>>> matrix_divided(3)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Testing with a matrix of uneven row sizes will give a custom
TypeError Exception  message.

::
	>>> matrix = [[1, 2, 3], [4, 5, 6, 7, 8]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

It also works with floating-point and negative values

::
	>>> matrix_divided(matrix, -3)
	[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
	>>> matrix_divided(matrix, 99.999)
	[[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]]

Non-Numbers
===========
A TypeError Exception is raised for types string, list, dictionary, or a tuple therefore printing the custom TypeError Exception message.

::
	>>> matrix_divided(4, "School") # doctest: +REPORT_NDIFF, +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided("School", 4) # doctest: +REPORT_NDIFF, +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided(None) # doctest: +REPORT_NDIFF, +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
